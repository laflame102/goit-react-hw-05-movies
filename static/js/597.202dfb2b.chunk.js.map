{"version":3,"file":"static/js/597.202dfb2b.chunk.js","mappings":"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","sources":["components/Cast.jsx","services.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'services';\nimport Loader from './Loader/Loader';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setLoading(true);\n        const response = await getCast(Number(movieId));\n        setCast(response.cast);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      <ul>\n        {cast.map(({ character, profile_path, name, id }) => (\n          <li key={id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n              alt={name}\n              width=\"70\"\n            />\n            <p>{name}</p>\n            <p>Character: {character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '46524a805b39690e1dbf4f8ffae20232';\n\nexport const getTrending = async () => {\n  const response = await fetch(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n\n  if (response.ok) {\n    return await response.json();\n  }\n\n  return Promise.reject(new Error(`There is no trending films`));\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n\n  if (response.ok) {\n    return await response.json();\n  }\n\n  return Promise.reject(new Error(`There is no movie with such id ${movieId}`));\n};\n\nexport const getCast = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n\n  if (response.ok) {\n    return await response.json();\n  }\n\n  return Promise.reject(new Error(`There is no movie with such id ${movieId}`));\n};\n\nexport const getReviews = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n\n  if (response.ok) {\n    return await response.json();\n  }\n\n  return Promise.reject(new Error(`There is no movie with such id ${movieId}`));\n};\n\nexport const getMovies = async movieName => {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${movieName}`\n  );\n\n  if (response.ok) {\n    return await response.json();\n  }\n\n  return Promise.reject(\n    new Error(`There is no movie with such name ${movieName}`)\n  );\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","cast","setCast","movieId","useParams","loading","setLoading","useEffect","fetchCast","getCast","Number","response","console","log","map","character","profile_path","name","id","src","alt","width","BASE_URL","KEY","getTrending","fetch","ok","json","Promise","reject","Error","getMovieDetails","getReviews","getMovies","movieName","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","error","done","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}