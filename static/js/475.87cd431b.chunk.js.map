{"version":3,"file":"static/js/475.87cd431b.chunk.js","mappings":"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","sources":["components/BackLink/BackLink.styled.jsx","components/BackLink/BackLink.jsx","pages/MovieDetails.jsx","services.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledLink } from './BackLink.styled';\nimport { HiArrowLeft } from 'react-icons/hi';\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n\nexport default BackLink;\n\nBackLink.propTypes = {\n  to: PropTypes.any,\n  children: PropTypes.string,\n};\n","import { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { Suspense, useEffect, useState } from 'react';\nimport { getMovieDetails } from 'services';\nimport BackLink from 'components/BackLink/BackLink';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState([]);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const BackLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        const response = await getMovieDetails(Number(movieId));\n        setMovie(response);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchMovie();\n  }, [movieId]);\n\n  if (!movie) {\n    return null;\n  }\n\n  const { original_title, vote_average, overview, genres, poster_path } = movie;\n\n  return (\n    <div>\n      <div>\n        <BackLink to={BackLinkHref}>Go back</BackLink>\n        <h2>FILM NAME: {original_title}</h2>\n        <img\n          src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n          alt={original_title}\n          width=\"270\"\n        />\n        <p>User score : {vote_average?.toFixed(1)}</p>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        <h4>Genres</h4>\n        <p>{genres?.map(genre => genre.name).join(', ')}</p>\n      </div>\n\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '46524a805b39690e1dbf4f8ffae20232';\n\nexport const getTrending = async () => {\n  const response = await fetch(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n\n  if (response.ok) {\n    return await response.json();\n  }\n\n  return Promise.reject(new Error(`There is no trending films`));\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n\n  if (response.ok) {\n    return await response.json();\n  }\n\n  return Promise.reject(new Error(`There is no movie with such id ${movieId}`));\n};\n\nexport const getCast = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n\n  if (response.ok) {\n    return await response.json();\n  }\n\n  return Promise.reject(new Error(`There is no movie with such id ${movieId}`));\n};\n\nexport const getReviews = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n\n  if (response.ok) {\n    return await response.json();\n  }\n\n  return Promise.reject(new Error(`There is no movie with such id ${movieId}`));\n};\n\nexport const getMovies = async movieName => {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${movieName}`\n  );\n\n  if (response.ok) {\n    return await response.json();\n  }\n\n  return Promise.reject(\n    new Error(`There is no movie with such name ${movieName}`)\n  );\n};\n"],"names":["StyledLink","styled","Link","to","children","size","useState","movie","setMovie","movieId","useParams","BackLinkHref","useLocation","state","from","useEffect","fetchMovie","getMovieDetails","Number","response","console","log","original_title","vote_average","overview","genres","poster_path","src","alt","width","toFixed","map","genre","name","join","Suspense","fallback","Loader","BASE_URL","KEY","getTrending","fetch","ok","json","Promise","reject","Error","getCast","getReviews","getMovies","movieName"],"sourceRoot":""}